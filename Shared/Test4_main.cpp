//-----------------------------------------------------------------------------
// DirectInput & Kinematics: Test 4
// Uses Direct Input 8 Interfaces.
// Original provided at SHU During Programming For Games

//-----------------------------------------------------------------------------
// RUBIKS CUBE AUTHOR: BRIAN LEMAN, SID 16024894 D.O.B. 22/01/1985 START DATE: 30/09/2009
#define STRICT
#define DIRECTINPUT_VERSION 0x0800
#define D3D_DEBUG_INFO	// Enable debugging information, so the .NET environment can help you.
#define DEBUG_VS
#define DEBUG_PS 
//-----------------------------------------------------------------------------
// Include these files
#include <windows.h>	// Windows library (for window functions, menus, dialog boxes, etc)
#include <d3dx9.h>		// Direct 3D library (for all Direct 3D functions)
#include <dinput.h>		// Direct Input library (for Direct Input functions)
#include "./../FireworksApp.h"
#include "./../particles.h"
D3DWindow* fireworksApp = nullptr;
//-----------------------------------------------------------------------------
// WinMain() - The application's entry point.
// This sort of procedure is mostly standard, and could be used in most DirectX applications.
int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInstance, LPSTR, int)
{

	mParticles = new StructParticle[MAX_PARTICLES];
	Init();

	SetupRockets();

	fireworksApp = new FireworksApp(hInst, hPrevInstance);
    if (SUCCEEDED(fireworksApp->SetupD3D()))
    {        		
		// Initialise Direct Input and acquire the keyboard
		if (SUCCEEDED(fireworksApp->SetupDirectInput()))
		{				
			//MessageBox(hwnd,"Keyboard Configuration\n\WASD:\tRotate Whole Cube\nSPACE:\tReset View\n\nTab:\tCycle Through Rotatable Sections/Complete Rotation\n\tPage Up Or Page Down Keys:\tRotate\n\nR:\tHOLD to rapidly rotate sections\n\nQ:\tTo Quit","Controls",MB_OK | MB_ICONINFORMATION);
			// Show the window
			fireworksApp->Show();

			// Enter the message loop
			MSG msg;
			ZeroMemory(&msg, sizeof(msg));
			while (msg.message != WM_QUIT)
			{
				if (PeekMessage(&msg, NULL, 0U, 0U, PM_REMOVE))
				{
					TranslateMessage(&msg);
					DispatchMessage(&msg);
				}
				else
				{
					fireworksApp->Update();
					fireworksApp->Render();
					fireworksApp->ProcessKeyboardInput();
				}
			}            
        }
    }
	
	fireworksApp->CleanUp();
	CleanUp();
    return 0;
}

//-----------------------------------------------------------------------------
	// The window's message handling function.
LRESULT WINAPI D3DWindow::MsgProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	static float screenHeight;
	switch (msg)
	{
		case WM_SIZE:
		{
			screenHeight = fireworksApp->mScreenHeight = (float)HIWORD(lParam);
			fireworksApp->mScreenWidth = (float)LOWORD(lParam);
			break;
		}

		case WM_MOUSEMOVE:
		{
			fireworksApp->mMouseX = (float)LOWORD(lParam);
			fireworksApp->mMouseY = screenHeight - (float)HIWORD(lParam);
			break;
		}
		case WM_DESTROY:
		{
			// Respond to a Windows destroy event.
			// Usually generated by clicking on the close box on the window.
			PostQuitMessage(0);
			return 0;
		}
	}

	return DefWindowProc(hWnd, msg, wParam, lParam);
}


